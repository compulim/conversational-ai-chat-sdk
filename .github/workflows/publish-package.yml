name: Publish package
run-name: 'Publish: ${{ inputs.package-name }}'

on:
  workflow_dispatch:
    inputs:
      # In pull-request-validation.yml, we enforce that the package name must equals to the package path.
      package-name:
        description: Package name
        options:
          - powerva-chat-adapter
          - powerva-chat-adapter-test-util
          - powerva-turn-based-chat-adapter-framework
        required: true
        type: choice

concurrency: publish-package/${{ inputs.package-name }}

env:
  node-version: lts/Hydrogen
  use-secure-feed: false # TODO: Temporary set to false during development.

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.com.
#            Instead, we must use an internal feed as reputable source.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - id: look-up-package-path
        name: Look up package path
        uses: ./.github/actions/look-up-package-path
        with:
          name: ${{ inputs.package-name }}
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - id: get-committed-version
        name: Get committed version
        run: |
          VERSION=`cat ${{ steps.look-up-package-path.outputs.path }}/package.json | jq -r .version` && true || exit 1
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - name: 'Sanity check: committed version must be prerelease'
        run: if [[ "${{ steps.get-committed-version.outputs.version }}" != *-* ]]; then exit 1; fi
      - id: compute-production-version
        name: Compute production version from ${{ steps.get-committed-version.outputs.version }}
        run: |
          VERSION=`npm exec -- semver --increment patch ${{ steps.get-committed-version.outputs.version }}` && true || exit 1
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - id: compute-next-prerelease-version
        name: Compute next prerelease version from ${{ steps.compute-production-version.outputs.version }}
        run: |
          VERSION=`npm exec -- semver --increment prepatch ${{ steps.compute-production-version.outputs.version }}` && true || exit 1
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - name: Build workflow control file
        run: |
          jq \
            --arg nextVersion "${{ steps.compute-next-prerelease-version.outputs.version }}" \
            --arg packageName "${{ inputs.package-name }}" \
            --arg packagePath "${{ steps.look-up-package-path.outputs.path }}" \
            --arg version "${{ steps.compute-production-version.outputs.version }}" \
            -nr \
            '{ nextVersion: $nextVersion, packageName: $packageName, packagePath: $packagePath, version: $version }' | tee workflow.json
      - name: Print workflow control file
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: workflow.json
          title: Workflow control file
      - name: 'Sanity check: workflow.json/packageName must not be empty'
        run: if [[ -z "`cat workflow.json | jq -r .packageName`" ]]; then exit 1; fi
      - name: 'Sanity check: workflow.json/packagePath must not be empty'
        run: if [[ -z "`cat workflow.json | jq -r .packagePath`" ]]; then exit 1; fi
      - name: 'Sanity check: workflow.json/version must not be empty'
        run: if [[ -z "`cat workflow.json | jq -r .version`" ]]; then exit 1; fi
      - name: 'Sanity check: workflow.json/packagePath must point to the right package'
        run: |
          PACKAGE_PATH=`cat workflow.json | jq -r .packagePath` && true || exit 1

          if [[ "`cat $PACKAGE_PATH/package.json | jq -r .name`" != ${{ inputs.package-name }} ]]
          then
            exit 1
          fi
      - name: Upload workflow control file
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: workflow
          path: workflow.json
  build:
    name: Build
    needs:
      - prepare
    outputs:
      tarball: ${{ steps.pack-tarball.outputs.tarball }}
      version: ${{ steps.bump-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: workflow
      - id: prepare
        name: Prepare
        run: |
          echo package-name=`cat workflow.json | jq -r '.packageName'` | tee --append $GITHUB_OUTPUT
          echo package-path=`cat workflow.json | jq -r '.packagePath'` | tee --append $GITHUB_OUTPUT
          echo version=`cat workflow.json | jq -r '.version'` | tee --append $GITHUB_OUTPUT
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - id: bump-version
        name: Bump version to production
        run: |
          npm version --no-git-tag-version --workspace=${{ steps.prepare.outputs.package-name }} ${{ steps.prepare.outputs.version }} && true || exit 1
      - name: Print bumped package.json
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ${{ steps.prepare.outputs.package-path }}/package.json
          title: Content of ${{ steps.prepare.outputs.package-path }}/package.json
          type: json
      - name: Run npm clean-install
        run: npm clean-install --ignore-scripts --strict-peer-deps # Prevents malicious scripts from stealing our token.
      - name: Build
        run: npm run build --if-present --workspaces=true
      - id: pack
        name: Pack
        run: |
          npm pack --json --pack-destination=$PWD --workspace=${{ steps.prepare.outputs.package-name }} | tee /tmp/output.json
          TARBALL=`cat /tmp/output.json | jq -r '.[0].filename'` && true || exit 1
          echo tarball=$TARBALL | tee --append $GITHUB_OUTPUT
      - name: Upload tarball
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: package
          path: ${{ steps.pack.outputs.tarball }}
      - name: Update workflow control file
        run: |
          cat workflow.json | jq --arg tarball "${{ steps.pack.outputs.tarball }}" -r '. + { tarball: $tarball }' | tee /tmp/workflow.json
          mv /tmp/workflow.json workflow.json
      - name: Print workflow control file
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: workflow.json
          title: Workflow control file
          type: json
      - name: Upload workflow control file
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: workflow
          path: workflow.json
      - name: Prepare summary
        run: |
          tar --extract --file=${{ steps.pack.outputs.tarball }} --to-stdout package/package.json | tee /tmp/extracted-package.json
          tar --list --file=${{ steps.pack.outputs.tarball }} --verbose | tee /tmp/tarball-content.txt
      - name: Print content of ${{ steps.pack.outputs.tarball }}
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: /tmp/tarball-content.txt
          title: List of content of ${{ steps.pack.outputs.tarball }}
      - name: Print ${{ steps.pack.outputs.tarball }}/package.json
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: /tmp/extracted-package.json
          title: Content of ${{ steps.pack.outputs.tarball }}/package.json
          type: json

  publish:
    environment:
      name: ${{ matrix.registry-url == 'https://registry.npmjs.org/' && 'npm-publish' || '' }}
      url: ${{ steps.result.outputs.url }}
    name: Publish
    needs:
      - build
    permissions:
      contents: read
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry-url:
          - https://registry.npmjs.org/
          # - https://npm.pkg.github.com/ # GitHub Packages requires scoped package.
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: package
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: ${{ matrix.registry-url }}
      - id: prepare
        name: Prepare
        run: |
          PACKAGE_NAME=`cat workflow.json | jq -r '.packageName'`
          TARBALL=`cat workflow.json | jq -r '.tarball'`
          VERSION=`cat workflow.json | jq -r '.version'`

          URL=https://npmjs.com/package/$PACKAGE_NAME/v/$VERSION

          echo package-name=$PACKAGE_NAME | tee --append $GITHUB_OUTPUT
          echo tarball=$TARBALL | tee --append $GITHUB_OUTPUT
          echo token=${{ matrix.registry-url == 'https://npm.pkg.github.com/' && github.token || secrets.NPM_TOKEN }} >> $GITHUB_OUTPUT
          echo url=$URL | tee --append $GITHUB_OUTPUT
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - name: 'Sanity check: tarball exists'
        run: |
          compgen -G ${{ steps.prepare.outputs.tarball }}
          ls ${{ steps.prepare.outputs.tarball }}
      - id: has-published
        name: Checks if ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ steps.prepare.outputs.package-name }}
          token: ${{ steps.prepare.outputs.token }}
          version: ${{ steps.prepare.outputs.version }}
      - env:
          NODE_AUTH_TOKEN: ${{ steps.prepare.outputs.token }}
        if: ${{ steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.version }}
        # TODO: Enable --provenance when in official repo.
        run: npm publish --access public --json ${{ steps.prepare.outputs.tarball }}
      - id: result
        name: Result
        run: |
          if [[ "${{ matrix.registry-url }}" == "https://registry.npmjs.org/" ]]
          then
            echo url=https://npmjs.com/package/${{ steps.prepare.outputs.package-name }}/v/${{ steps.prepare.outputs.version }} | tee --append $GITHUB_OUTPUT
          elif [[ "${{ matrix.registry-url }}" == "https://npm.pkg.github.com/" ]]
          then
            echo url=${{ github.server_url }}/${{ github.repository }}/pkgs/npm/${{ steps.prepare.outputs.package-name }} | tee --append $GITHUB_OUTPUT
          fi

  create-release:
    environment:
      name: github-release
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ steps.prepare.outputs.tag }}
    name: Create release
    needs:
      - build
      - publish
    permissions:
      contents: write # Required for creating release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: package
      - id: prepare
        name: Prepare
        run: |
          PACKAGE_NAME=`cat workflow.json | jq -r '.packageName'`
          VERSION=`cat workflow.json | jq -r '.version'`

          TAG=release/$PACKAGE_NAME/v$VERSION

          echo package-name=$PACKAGE_NAME | tee --append $GITHUB_OUTPUT
          echo tag=$TAG | tee --append $GITHUB_OUTPUT
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - # We need to use "gh api" to create a tag/ref.
        # Otherwise, if last commit was modifying workflow, it will fail with permission issues.
        env:
          GH_TOKEN: ${{ github.token }}
        id: push-tag
        name: Push tag
        run: gh api repos/${{ github.repository }}/git/refs --field ref=refs/tags/${{ steps.prepare.outputs.tag }} --field sha=${{ github.sha }}
      - env:
          GH_TOKEN: ${{ github.token }}
        id: create-release
        name: Create release
        run: |
          DATE=`date +%F`
          gh release create ${{ steps.prepare.outputs.tag }} ./*.tgz --repo ${{ github.repository }} --title "${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.version }} - $DATE"

  pull-request-create-bump-version:
    environment:
      name: pull-request
      url: ${{ steps.create-pull-request.outputs.url }}
    name: Create pull request to bump
    needs:
      - build
      - publish
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workflow
      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}
          registry-url: https://npm.pkg.github.com/
      - if: ${{ env.use-secure-feed != 'false' }}
        name: Use secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - id: prepare
        name: Prepare
        run: |
          NEXT_VERSION=`cat workflow.json | jq -r '.nextVersion'`
          PACKAGE_NAME=`cat workflow.json | jq -r '.packageName'`
          PACKAGE_PATH=`cat workflow.json | jq -r '.packagePath'`
          VERSION=`cat workflow.json | jq -r '.version'`

          BRANCH_NAME=bot/postpublish/$PACKAGE_NAME/v$NEXT_VERSION

          echo branch-name=$BRANCH_NAME | tee --append $GITHUB_OUTPUT
          echo next-version=$NEXT_VERSION | tee --append $GITHUB_OUTPUT
          echo package-name=$PACKAGE_NAME | tee --append $GITHUB_OUTPUT
          echo package-path=$PACKAGE_PATH | tee --append $GITHUB_OUTPUT
          echo version=$VERSION | tee --append $GITHUB_OUTPUT
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-branch
        name: Create branch
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "@${{ github.actor }}"

          git checkout -b ${{ steps.prepare.outputs.branch-name }}
      - name: Bump ${{ steps.prepare.outputs.package-path }}/CHANGELOG.md
        run: npx keep-a-changelog --file="${{ steps.prepare.outputs.package-path }}/CHANGELOG.md" --format=markdownlint --url="${{ github.server_url }}/${{ github.repository }}" --release="${{ steps.prepare.outputs.version }}"
      - name: Stage ${{ steps.prepare.outputs.package-path }}/CHANGELOG.md
        run: git add ${{ steps.prepare.outputs.package-path }}/CHANGELOG.md
      - env:
          NODE_AUTH_TOKEN: ${{ github.token }}
        id: bump-version
        name: Bump ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.next-version }}
        run: npm version --no-git-tag-version --workspace=${{ steps.prepare.outputs.package-name }} ${{ steps.prepare.outputs.next-version }}
      - name: Print package.json
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ${{ steps.prepare.outputs.package-path }}/package.json
          title: Content of ${{ steps.prepare.outputs.package-name }}/package.json
          type: json
      - name: Stage package-lock.json
        run: git add package-lock.json
      - name: Stage ${{ steps.prepare.outputs.package-path }}/package.json
        run: git add ${{ steps.prepare.outputs.package-path }}/package.json
      - name: Commit branch
        run: git commit --message="Bump ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.next-version }}"
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        name: Push branch
        run: git push --set-upstream origin ${{ steps.prepare.outputs.branch-name }}
      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        id: create-pull-request
        name: Create pull request
        run: |
          URL=`gh pr create --assignee @me --body "Post-publish of ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}." --fill --label bot --repo ${{ github.repository }}` && true || exit 1
          echo url=$URL | tee --append $GITHUB_OUTPUT
