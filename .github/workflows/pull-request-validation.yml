name: 'CI: Pull request validation'

on:
  pull_request:
    branches:
      - main
  workflow_dispatch: {} # Run on-demand for testing workflow functionality.

defaults:
  run:
    shell: bash

env:
  node-version: lts/Iron

jobs:
  sanity-check-root:
    name: 'Sanity check: root package'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Assumption in our toolchain.
      - name: 'Sanity check: package path must match their package name'
        run: |
          for path in $(cat package.json | jq -r '.workspaces | join("\n")')
          do
            cat ./$path/package.json | jq \
              --arg packagePath "$path" \
              -r \
              'if $packagePath == "packages/" + .name then empty else halt_error(1) end'
          done

      # Assumption in our toolchain.
      - name: 'Sanity check: package-lock.json must be version 3'
        run: cat ./package-lock.json | jq 'if .lockfileVersion == 3 then empty else empty | halt_error(1) end'

      - name: 'Sanity check: registry must be https://registry.npmjs.org/'
        run: cat ./package-lock.json | jq '.packages | with_entries(select(.value.link | not)) | with_entries(select(.value.resolved != null)) | with_entries(select(.value.resolved | startswith("https://registry.npmjs.org/") | not)) | if length > 0 then halt_error(1) else empty end'

  build:
    name: Build
    outputs:
      package-matrix: ${{ steps.set-outputs.outputs.package-matrix }}
      test-matrix: ${{ steps.set-outputs.outputs.test-matrix }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: npm

      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevents malicious scripts from stealing our token.

      - run: npm run postinstall --if-present --workspaces=true # Run whitelisted postinstall scripts.

      - name: Run static code analysis
        run: npm run precommit --workspaces=true

      - name: Build
        run: npm run build --if-present --workspaces=true

      - if: strategy.job-index == 0
        name: Pack tarballs
        run: |
          mkdir -p .tmp/tarball
          npm pack --json --pack-destination=.tmp/tarball --workspaces=true > .tmp/pack-result.json

      - if: strategy.job-index == 0
        name: Print pack result
        run: cat .tmp/pack-result.json | jq -r 'map(del(.files))'

      - if: strategy.job-index == 0
        name: Upload tarball artifact
        uses: actions/upload-artifact@v3
        with:
          name: tarball
          path: .tmp/tarball/*.tgz

      - id: set-outputs
        if: strategy.job-index == 0
        name: Set outputs
        run: |
          cat .tmp/pack-result.json | jq -cr 'map({ filename: .filename, name: .name })' | tee --append .tmp/package-matrix.json

          echo package-matrix=$(< .tmp/package-matrix.json) | tee --append $GITHUB_OUTPUT
          echo test-matrix=$(cat .tmp/package-matrix.json | jq -r 'reduce (([., [{ os: "ubuntu-latest" }, { os: "windows-latest" }]] | combinations) | reduce .[] as $i ({}; . * $i)) as $i ([]; . + [$i])') | tee --append $GITHUB_OUTPUT

  # We separated "test" so we can fan it out.
  test:
    name: Test (${{ matrix.name }}, ${{ matrix.os }})
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include: ${{ fromJSON(needs.build.outputs.test-matrix) }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          cache: npm

      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevents malicious scripts from stealing our token.

      - run: npm run postinstall --if-present --workspaces=true # Run whitelisted postinstall scripts.

      - uses: actions/download-artifact@v3
        with:
          name: tarball
          path: .tmp/tarball/

      - env:
          package_matrix: ${{ needs.build.outputs.package-matrix }}
        name: Extract tarballs
        run: |
          ls .tmp/tarball/
          echo $package_matrix | jq -r | tee .tmp/package-matrix.json

          for entry in $(cat .tmp/package-matrix.json | jq -cr '.[]')
          do
            filename=$(echo $entry | jq -r '.filename')
            name=$(echo $entry | jq -r '.name')

            tar -xvf .tmp/tarball/$filename --directory=packages/$name --strip-components=1
          done

      - name: Test
        run: npm test --if-present --workspace=${{ matrix.name }}

  sanity-check-package:
    name: 'Sanity check: ${{ matrix.name }}'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.build.outputs.package-matrix) }}

    steps:
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: tarball

      - name: Extract tarball to root
        run: tar --extract --file=${{ matrix.filename }} --strip-components=1 --verbose

      - id: prepare
        name: Prepare
        run: echo is-private=$(cat ./package.json | jq -r '.private // false') | tee --append $GITHUB_OUTPUT

      - name: 'Sanity check: package name must not be scoped'
        # This is because our rescoping step in continuous deployment will not work if the package is already scoped, it just do plain concat.
        # We can support scoped package if we add that feature to our CD pipeline.
        run: cat ./package.json | jq 'if .name | contains("@") then halt_error(1) else empty end'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: has LICENSE'
        run: '[[ -f ./LICENSE ]]'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: has README.md'
        run: '[[ -f ./README.md ]]'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: at least one exports'
        run: cat ./package.json | jq '.exports | to_entries | if length == 0 then halt_error(1) else empty end'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: all exports exists'
        run: cat ./package.json | jq '.exports | map(flatten) | flatten | .[]' | xargs -L1 test -f

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: all exports has "types" condition'
        run: cat ./package.json | jq '.exports | map(select(.types == null)) | if length > 0 then halt_error(1) else empty end'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: has source maps'
        # TODO: Check if abc.js has abc.js.map, instead of just *.js.map.
        run: compgen -G lib/**/*.js.map

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: no lib/**/*.spec.*'
        run: '! compgen -G lib/**/*.spec.*'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: no lib/**/*.test.*'
        run: '! compgen -G lib/**/*.test.*'

      - env:
          package_matrix: ${{ needs.build.outputs.package-matrix }}
        name: 'Sanity check: no production dependencies are pre-release except local peers'
        run: |
          mkdir .tmp/
          echo $package_matrix | jq -r | tee .tmp/package-matrix.json

          cat ./package.json | jq \
            --argfile matrix .tmp/package-matrix.json \
            '.dependencies + ($matrix | map({ key: .name }) | from_entries) | with_entries(select(.value // "" | contains("-"))) | if length > 0 then halt_error(1) else empty end'

      - name: 'Sanity check: version must be prerelease and ends with -0'
        run: '[[ "$(cat ./package.json | jq -r ''.version'')" == *-0 ]]'

      - if: steps.prepare.outputs.is-private != 'true'
        name: 'Sanity check: package.json/files must contains at least one item'
        run: cat ./package.json | jq '.files // [] | if length == 0 then halt_error(1) else empty end'

      # TODO: Must contains changes in CHANGELOG.md if it modified *.ts
      # TODO: In CHANGELOG.md, if breaking changes is modified, must bump major
      # TODO: In CHANGELOG.md, if features are removed, must bump major
      # TODO: In CHANGELOG.md, if features are added, must bump minor
      # TODO: In CHANGELOG.md, if bugs are fixed, must bump patch
