name: 'CD: Release'
run-name: "${{ startsWith(github.ref_name, 'bot/release/production/') && format('Production release: {0}', github.ref_name) || format('Development release: {0}', github.ref_name) }}"

on:
  push:
    branches:
      - bot/release/main/*
      - bot/release/production/*

concurrency: on-push-branch-release

defaults:
  run:
    shell: bash

env:
  dry-run: false
  node-version: lts/Iron # Node.js 20
  skip-secure-feed: false

# Disable all permissions and explicitly specific in the job.
permissions: {}

jobs:
  prepare:
    name: Prepare
    outputs:
      matrix: ${{ steps.read-matrix.outputs.matrix }}
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Print matrix.json
        run: jq -r '.' ./matrix.json

      - name: 'Sanity check: must have at least one package to publish'
        run: |
          [[ $(cat ./matrix.json | jq -r '.publishingPackages | length') > 0 ]]

      - id: read-matrix
        name: Output matrix.json
        run: echo matrix=$(jq -cr '.' ./matrix.json) | tee --append $GITHUB_OUTPUT

  build:
    name: Build
    needs: prepare
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ env.node-version }}

      - if: "env.skip-secure-feed != 'true'"
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed

      - run: npm clean-install --ignore-scripts --strict-peer-deps # Prevent malicious scripts from running.

      - name: Run whitelisted install scripts
        run: npm run postinstall --if-present --workspaces=true

      - name: Build
        run: npm run build --if-present --workspaces=true

      - name: Pack
        run: |
          mkdir -p .tmp/tarball/

          for entry in $(cat ./matrix.json | jq -cr '.packages[]')
          do
            name=$(echo $entry | jq -r '.name')
            path=$(echo $entry | jq -r '.path')
            expected_tarball=$(echo $entry | jq -r '.tarball')

            echo ::group::$path

            npm pack --json --pack-destination=.tmp/tarball/ --workspace=$name > .tmp/pack-result.json

            # Prints "npm pack" result.
            cat .tmp/pack-result.json | jq 'map(del(.files))'

            # Just in case if the tarball named differently than our matrix.json, rename it.
            actual_tarball=$(cat .tmp/pack-result.json | jq -r '.[0].filename')
            if [[ $actual_tarball != $expected_tarball ]]
            then
              echo ::warning::Expected tarball filename "$expected_tarball" is different than actual filename "$actual_tarball".
              mv .tmp/tarball/$actual_tarball .tmp/tarball/$expected_tarball
            fi

            echo ::endgroup::
          done

          ls -la .tmp/tarball/

      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: packages
          path: .tmp/tarball/

  github-pages-artifact:
    name: 'Build: GitHub Pages'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: matrix.json

      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Make directory
        run: mkdir ./_site/

      - id: pages-tarball
        name: Get tarball filename
        run: echo tarball=$(cat ./matrix.json | jq -r '.packages[] | select(.name == "pages") | .tarball') | tee --append $GITHUB_OUTPUT

      - name: 'Sanity check: tarball exists'
        run: '[[ -f ${{ steps.pages-tarball.outputs.tarball }} ]]'

      - name: Extract ${{ steps.pages-tarball.outputs.tarball }}
        run: tar --directory=./_site/ --extract --file=${{ steps.pages-tarball.outputs.tarball }} --strip-components=2 --verbose package/public

      - name: List directory
        run: ls -la ./_site/

      - name: 'Sanity check: must have index.html'
        run: '[[ -f ./_site/index.html ]]'

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  sanity-check:
    name: 'Sanity check: ${{ matrix.name }}'
    needs:
      - build
      - prepare
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix).packages }}

    steps:
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: 'Sanity check: "${{ matrix.tarball }}" must exists'
        run: '[[ -f ./${{ matrix.tarball }} ]]'

      - name: Print package.json
        run: tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq

      - name: 'Sanity check: tarball "name" field must be "${{ matrix.name }}"'
        run: '[[ $(tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq -r .name) == "${{ matrix.name }}" ]]'

      - name: 'Sanity check: tarball "version" field must be "${{ matrix.version }}"'
        run: '[[ $(tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json | jq -r .version) == "${{ matrix.version }}" ]]'

  github-pages-deployment:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    name: 'GitHub Pages: deploy'
    needs:
      - github-pages-artifact
      - sanity-check
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest

    steps:
      - id: deployment
        if: "env.dry-run != 'true'"
        name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v2

  github-release-publish:
    env:
      tag: ${{ format('release/{0}/v{1}', matrix.name, matrix.version) }}
    environment:
      name: github-release
      url: ${{ format('{0}/{1}/releases/tag/{2}', github.server_url, github.repository, env.tag) }}
    # Skip publishing to NPM on forks.
    # TODO: Remove this. We are commenting out for testing.
    # if: github.repository_owner == 'microsoft'
    # Do not run if there are nothing to publish.
    if: 'fromJSON(needs.prepare.outputs.matrix).publishToGitHubRelease'
    name: "GitHub Release: ${{ format('{0}@{1}', matrix.name, matrix.version) }}"
    needs:
      - build
      - prepare
      - sanity-check
    permissions:
      contents: write # Required for creating release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix).publishingPackages }}

    steps:
      - name: Download tarball artifact
        uses: actions/download-artifact@v3
        with:
          name: packages

      - # We need to use "gh api" to create a tag/ref, instead of "git push" tag.
        # This is because, if last commit was modifying workflow, it will fail with permission issues.
        env:
          GH_TOKEN: ${{ github.token }}
        if: "env.dry-run != 'true'"
        name: Push tag
        run: |
          gh api \
            repos/${{ github.repository }}/git/refs \
            --field ref=refs/tags/${{ env.tag }} \
            --field sha=${{ github.sha }}

      - env:
          GH_TOKEN: ${{ github.token }}
        if: "env.dry-run != 'true'"
        name: Create release
        run: |
          date=$(date +%F)

          gh release create \
            ${{ env.tag }} \
            ${{ matrix.tarball }} \
            --notes "> [Workflow run](${{ format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, github.run_id) }})" \
            --title "${{ format('{0}@{1}', matrix.name, matrix.version) }} - $date" \
            --repo ${{ format('{0}/{1}', github.server_url, github.repository) }}

  npm-publishing:
    environment:
      name: npm-publish
      # Example: https://npmjs.com/package/powerva-chat-adapter/v/0.0.0-0
      url: ${{ format('https://npmjs.com/package/{0}/v/{1}', matrix.name, matrix.version) }}

    # Skip publishing to NPM on forks.
    # TODO: Remove this. We are commenting out for testing.
    # if: github.repository_owner == 'microsoft'

    # Do not run if there are nothing to publish.
    if: 'fromJSON(needs.prepare.outputs.matrix).publishToNPM'
    name: "NPM: ${{ format('{0}@{1}', matrix.name, matrix.version) }}"
    needs:
      - build
      - prepare
      - sanity-check
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: ${{ fromJSON(needs.prepare.outputs.matrix).publishingPackages }}

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github/actions/check-if-package-has-published

      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages

      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}
          registry-url: https://registry.npmjs.org/

      - name: List package
        run: ls -l ${{ matrix.tarball }}

      - name: Print package.json
        run: tar --extract --file=${{ matrix.tarball }} --to-stdout package/package.json

      # Make sure the package.json/dependencies+devDependencies does not contains any prerelease.

      - id: has-published
        name: Checks if ${{ format('{0}@{1}', matrix.name, matrix.version) }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.name }}
          version: ${{ matrix.version }}

      - env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: "steps.has-published.outputs.published == 'false' && env.dry-run != 'true'"
        name: "Publish ${{ format('{0}@{1}', matrix.name, matrix.version) }}"
        run: npm publish --access public --json --provenance ${{ matrix.tarball }}

  pull-request-create:
    env:
      branch: ${{ format('bot/bump-after-release/{0}', github.run_number) }}
    environment:
      # This environment needs:
      # - pull-request: write
      # - workflows: write // PR may contains changes to workflow file
      name: owner
      url: ${{ steps.create-pull-request.outputs.url }}
    # Creates pull request branch only for production release.
    if: |
      startsWith(github.ref_name, 'bot/release/production/') &&
      !cancelled() &&
      needs.prepare.result == 'success' &&
      needs.build.result == 'success' &&
      needs.sanity-check.result == 'success' &&
      needs.github-pages-deployment.result != 'failure' &&
      needs.github-release-publish.result != 'failure' &&
      needs.npm-publishing.result != 'failure'

    name: Pull request
    needs:
      - build
      - github-pages-deployment
      - github-release-publish
      - npm-publishing
      - prepare
      - sanity-check
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js ${{ env.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.node-version }}

      - if: "env.skip-secure-feed != 'true'"
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed

      - run: npm install --global --ignore-scripts keep-a-changelog@latest # Ignore scripts to prevent malicious scripts.

      # We intentionally checkout after enable secure feed.
      # This will speed up secure feed setup significantly as it don't need to patch package-lock.json.
      # But we also need to be super careful we don't run any NPM commands that would fetch the registry. We are insecure here.
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN_PULL_REQUEST }}

      - name: Bump versions
        run: |
          for entry in $(cat ./matrix.json | jq -cr '.publishingPackages[]')
          do
            name=$(echo $entry | jq -r '.name')
            path=$(echo $entry | jq -r '.path')

            echo ::group::$name

            # We will do workspaces-update later via npm-update-workspace-packages action
            npm version \
              --no-git-tag-version \
              --no-workspaces-update \
              --package-lock-only \
              --workspace="$name" prepatch

            cat $path/package.json

            git add $path/package.json

            echo ::endgroup::
          done

      - name: Add unreleased to CHANGELOG.md
        run: |
          for entry in $(cat ./matrix.json | jq -cr '.publishingPackages[]')
          do
            name=$(echo $entry | jq -r '.name')
            path=$(echo $entry | jq -r '.path')

            echo ::group::$name

            # We installed keep-a-changelog from secure feed.
            # Make sure we run offline and don't install another one.
            npx \
              --offline \
              --workspace="$name" \
              keep-a-changelog \
              --create \
              --file="CHANGELOG.md" \
              --format=markdownlint \
              --url="${{ format('{0}/{1}', github.server_url, github.repository) }}" || true

            git add $path/CHANGELOG.md

            echo ::endgroup::
          done

      - name: Run npm update on workspace packages
        uses: ./.github/actions/npm-update-workspace-packages

      - name: Remove matrix.json
        run: git rm matrix.json

      - name: Print changes
        run: git status --verbose

      - name: Configure Git
        run: |
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git config user.name "@${{ github.actor }}"

      - name: Create branch
        run: git checkout -b ${{ env.branch }}

      - name: Commit to branch
        run: git commit --message="Bump after production release"

      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_PULL_REQUEST }}
        name: Push branch
        run: git push -u origin ${{ env.branch }}

      - env:
          GH_TOKEN: ${{ secrets.GH_TOKEN_PULL_REQUEST }}
        id: create-pull-request
        name: Create pull request
        # TODO: Add "bot" label
        run: |
          echo url=$(gh pr create \
            --assignee @me \
            --body "> [Workflow run](${{ format('{0}/{1}/actions/runs/{2}', github.server_url, github.repository, github.run_id) }})." \
            --title "Bump after production release" \
            --repo ${{ github.repository }} \
          ) | tee --append $GITHUB_OUTPUT

  delete-branch:
    environment: owner
    if: |
      !cancelled() &&
      needs.prepare.result == 'success' &&
      needs.build.result == 'success' &&
      needs.sanity-check.result == 'success' &&
      needs.github-pages-deployment.result != 'failure' &&
      needs.github-release-publish.result != 'failure' &&
      needs.npm-publishing.result != 'failure' &&
      needs.pull-request-create.result != 'failure'
    name: Delete development branch
    needs:
      - build
      - github-pages-deployment
      - github-release-publish
      - npm-publishing
      - prepare
      - pull-request-create
      - sanity-check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN_PULL_REQUEST }}

      - name: Delete branch
        run: git push -d origin ${{ github.ref_name }}
