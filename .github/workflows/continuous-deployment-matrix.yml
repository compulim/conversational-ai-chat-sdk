name: Continuous deployment (matrix-based)
run-name: "${{ github.event_name != 'push' && format('Continuous deployment: {0} on {1}', github.event_name, github.ref_name) || null }}"

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.azdo/**'
      - '.devcontainer/**'
      - '.github/**'
  workflow_dispatch:
    inputs:
      use-secure-feed:
        default: true
        description: Use secure feed (required for production)
        required: true
        type: boolean

# Do not cancel current run. This is because we are using ${{ github.sha }} to determine what to publish.
# If current run is cancelled, we will not publish packages for the current run.
concurrency: continuous-deployment

# Notes:
# - CyberEO: During production build, we must not install packages from npmjs.org.
#            Instead, we must use a reputable source that allow us to quickly disable vulnerable feed, i.e. an internal feed.
# - CyberEO: Limit token usage. Only expose token in steps, rather than in jobs.

env:
  node-version: lts/Hydrogen
  publish-tag: release/vnext

jobs:
  # TODO: Add "prepare" job to prepare workspaces file
  prepare:
    name: Prepare
    outputs:
      # TODO: Do we need all matrix? Looks like we are using public-only matrix.
      matrix: ${{ steps.build-matrix.outputs.matrix }}
      matrix-public-only: ${{ steps.build-matrix.outputs.matrix-public-only }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Infinite depth required for commitish
      - name: Set up Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ inputs.node-version }}
          registry-url: https://npm.pkg.github.com/
      - if: ${{ inputs.use-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - run: npm install --global --ignore-scripts semver@latest # Skip scripts to prevent malicious scripts from stealing the token.
      - name: Build workspaces file # This will become source of truth.
        run: |
          BRANCH=`git branch --show-current`

          echo {} > workspaces.json

          for i in `cat package.json | jq -r '.workspaces | join("\n")'`
          do
            # COMMITTER_DATE=20230815-110805
            COMMITTER_DATE=`git log --date=format:%Y%m%d-%H%M%S --pretty=format:'%cd' -1 ./$i/`

            # COMMITTER_DATE_IN_ISO8601=2023-08-15T11:08:05-07:00
            COMMITTER_DATE_IN_ISO8601=`git log --pretty=format:'%cI' -1 ./$i/`

            # LONG_COMMITISH=0bf2b813727c5680ac19296442d464fe366ec3e9
            LONG_COMMITISH=`git log --pretty=format:'%H' -1 ./$i/`

            # SHORT_COMMITISH=0bf2b81
            SHORT_COMMITISH=`git log --pretty=format:'%h' -1 ./$i/`

            # VERSION=main.20230815-110805.0bf2b81
            # This version is not very accurate, after running `npm version`, it will remove leading zeroes in prerelease tags if that certain part is all numeric.
            # "main.20230815-110805.0bf2b81" -> "main.20230815-110805.0bf2b81"
            # "main.20230815-110805.0012345" -> "main.20230815-110805.12345"
            # We will update the workspaces file again in build job.
            VERSION=`cat ./$i/package.json | jq -r .version | xargs -L1 npm exec --offline -- semver --increment prerelease -n false --preid $BRANCH.$COMMITTER_DATE.$SHORT_COMMITISH`

            cat ./workspaces.json | jq --arg branch $BRANCH --arg committerDateInISO8601 $COMMITTER_DATE_IN_ISO8601 --arg longCommitish $LONG_COMMITISH --arg shortCommitish $SHORT_COMMITISH --arg path ./$i/ --arg version $VERSION --argfile packageJSON ./$i/package.json -r '. + { ($packageJSON.name): { branch: $branch, committerDate: $committerDateInISO8601, longCommitish: $longCommitish, name: $packageJSON.name, path: $path, private: ($packageJSON.private // false), shortCommitish: $shortCommitish, version: $version } }' > /tmp/workspaces.json && true || exit 1
            mv /tmp/workspaces.json ./workspaces.json && true || exit 1
          done

          cat workspaces.json
      - name: Upload workspaces file
        uses: actions/upload-artifact@v3
        with:
          name: workspaces
          path: ./workspaces.json
      - id: build-matrix
        name: Build matrix
        run: |
          cat workspaces.json | jq -r 'map(.name) | { "package-name": . }' > /tmp/matrix.json
          echo matrix=`cat /tmp/matrix.json | jq -cr` | tee --append $GITHUB_OUTPUT

          cat workspaces.json | jq -r 'map(select(.private | not)) | map(.name) | { "package-name": . }' > /tmp/matrix-public-only.json
          echo matrix-public-only=`cat /tmp/matrix-public-only.json | jq -cr` | tee --append $GITHUB_OUTPUT
      - name: Print workflow control file
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ./workspaces.json
          title: Workflow control file
          type: json
      - name: Print all packages
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: /tmp/matrix.json
          title: All packages
          type: json
      - name: Print public packages
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: /tmp/matrix-public-only.json
          title: Public packages
          type: json

  build:
    name: Build
    needs:
      - prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          cache: npm
          node-version: ${{ inputs.node-version }}
          registry-url: https://npm.pkg.github.com/
      - if: ${{ inputs.use-secure-feed }}
        name: Set up secure feed
        run: npx https://aka.ms/EnableSecureFeed
        shell: bash
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - # We cannot run "npm version" right after "npx semver". Otherwise, next run of "npx semver" will ignore "-n false".
        # "npm version" will update workspaces. During update, it will need to talk to NPM registry.
        name: Bump versions
        run: cat workspaces.json | jq -cr 'to_entries | map("--workspace=" + .key + " " + .value.version) | join("\n")' | xargs -L1 npm version
      - run: npm clean-install --ignore-scripts --strict-peer-deps # CyberEO: Ignore scripts to prevent malicious scripts from stealing the token.
      - name: Build
        run: npm run build --if-present --workspaces=true
      - name: Pack tarballs
        run: npm pack --json --pack-destination=$PWD --workspaces=true > /tmp/pack-result.json
      - name: Update workspaces file with tarball
        run: |
          cat workspaces.json | jq --argfile pack /tmp/pack-result.json -rS 'with_entries(.key as $name | . + (.value += { tarball: $pack | map(select(.name == $name))[0].filename }))' | tee /tmp/workspaces.json
          mv /tmp/workspaces.json workspaces.json
      - name: Update workspaces file with version
        run: |
          cat workspaces.json | jq --argfile pack /tmp/pack-result.json -rS 'with_entries(.key as $name | . + (.value += { version: $pack | map(select(.name == $name))[0].version }))' | tee /tmp/workspaces.json
          mv /tmp/workspaces.json workspaces.json
      - name: Upload package-lock.json
        uses: actions/upload-artifact@v3
        with:
          name: package-lock
          path: ./package-lock.json
      - name: Upload packages artifact
        uses: actions/upload-artifact@v3
        with:
          name: packages
          path: ./*.tgz
      - name: Upload updated workspaces file
        uses: actions/upload-artifact@v3
        with:
          name: workspaces
          path: ./workspaces.json
      - name: Print workflow control file
        uses: ./.github/actions/print-step-summary-from-file
        with:
          path: ./workspaces.json
          title: Workflow control file
          type: json

  build-github-pages:
    name: 'Build: GitHub Pages'
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - name: Download packages artifact
        uses: actions/download-artifact@v3
        with:
          name: packages
      - id: get-tarball-name
        name: Get tarball name
        run: |
          TARBALL=`cat workspaces.json | jq -r '.pages.tarball | if . then . else halt_error(1) end'` && true || exit 1
          echo tarball=$TARBALL | tee --append $GITHUB_OUTPUT
      - name: Extract ${{ steps.get-tarball-name.outputs.tarball }}
        run: |
          mkdir ./_site/
          tar --directory=./_site/ --extract --file=`ls -1 ${{ steps.get-tarball-name.outputs.tarball }}` --strip-component=2 --verbose package/public
          ls -la ./_site/
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2

  build-github-packages:
    name: 'Build: GitHub Packages'
    needs:
      - build
      - prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix-public-only) }}
    steps:
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
      - id: prepare
        name: Prepare
        run: |
          cat workspaces.json
          echo tarball=`cat workspaces.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball'` | tee --append $GITHUB_OUTPUT
      - name: Extract package
        run: |
          ls -l ${{ steps.prepare.outputs.tarball }}

          tar -xvf ${{ steps.prepare.outputs.tarball }}
          cat package/package.json
      - id: rescope
        name: Rescope
        run: |
          cat package.json | jq --argfile versions ../workspaces.json -r '. | (.name = "@${{ github.repository_owner }}/" + .name) | (.dependencies |= (. | with_entries(if ({ (.key): {} } | inside($versions)) then . | (.value = "npm:@${{ github.repository_owner }}/" + .key + "@" + .value) else . end))) | (.devDependencies |= (. | with_entries(if ({ (.key): {} } | inside($versions)) then . | (.value = "npm:@${{ github.repository_owner }}/" + .key + "@" + .value) else . end)))' | tee /tmp/package.json
          mv /tmp/package.json package.json
        working-directory: ./package
      - name: Repack
        run: |
          TARBALL=`npm pack --ignore-scripts --json | jq -r '.[0].filename'` && true || exit 1
          mv $TARBALL ../${{ steps.prepare.outputs.tarball }}
        working-directory: ./package
      - name: Upload scoped package
        uses: actions/upload-artifact@v3
        with:
          name: scoped-packages
          path: ${{ steps.prepare.outputs.tarball }}

  approval:
    name: Approval
    needs:
      - build
      - build-github-packages
      - build-github-pages
    runs-on: ubuntu-latest
    steps:
      - name: Approved
        run: echo Approved.

  release-upload-workspaces-json:
    name: 'Release: Upload workspaces file'
    needs:
      - approval
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    steps:
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload workspaces file to GitHub "${{ env.publish-tag }}" release
        run: gh release upload --clobber ${{ env.publish-tag }} workspaces.json --repo ${{ github.repository }}

  release-upload-package:
    name: 'Release: Upload package'
    needs:
      - approval
      - prepare
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix-public-only) }}
    steps:
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - name: Download packages
        uses: actions/download-artifact@v3
        with:
          name: packages
      - id: prepare
        name: Prepare
        run: echo tarball=`cat workspaces.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball | ltrimstr("./")'` | tee --append $GITHUB_OUTPUT
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Get current assets
        run: |
          gh release view ${{ env.publish-tag }} --json assets --repo ${{ github.repository }} > assets.json
          cat assets.json | jq
      - id: check-existence
        name: Check if asset already present
        run: |
          echo exist=`cat assets.json | jq --arg name ${{ steps.prepare.outputs.tarball }} '.assets | any(select(.name == $name))'` | tee --append $GITHUB_OUTPUT

          if [[ exist == 'false' ]]
          then
            echo Asset does not exists, should upload.
          else
            echo Asset already exists, should not overwrite.
          fi
      - env:
          GH_TOKEN: ${{ github.token }}
        if: ${{ steps.check-existence.outputs.exist == 'false' }}
        name: Upload new asset
        run: gh release upload ${{ env.publish-tag }} ${{ steps.prepare.outputs.tarball }} --repo ${{ github.repository }}
      - env:
          GH_TOKEN: ${{ github.token }}
        if: ${{ steps.check-existence.outputs.exist == 'false' }}
        name: Delete obsoleted assets
        run: |
          for ASSET_NAME in `cat assets.json | jq -r --arg name ${{ matrix.package-name }} '.assets | map(select(.name | test($name + "-[0-9]"))) | map(.name) | join("\n")'`
          do
            gh release delete-asset ${{ env.publish-tag }} $ASSET_NAME --repo ${{ github.repository }} || true
            echo "Deleted \`$ASSET_NAME\`"
          done

  release-upload-pages:
    name: 'Release: Upload pages'
    needs:
      - approval
    permissions:
      contents: write # "contents" is required for modifying releases.
    runs-on: ubuntu-latest
    steps:
      - name: Download pages
        uses: actions/download-artifact@v3
        with:
          name: github-pages
      - name: Rename to github-pages.tar
        run: mv artifact.tar github-pages.tar
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Upload pages to GitHub "${{ env.publish-tag }}" release
        run: gh release upload --clobber ${{ env.publish-tag }} github-pages.tar --repo ${{ github.repository }}

  # Update release after re-pushing a new tag.
  release-publish:
    environment:
      name: github-release
      url: ${{ steps.prepare.outputs.url }}
    name: 'Release: Publish'
    needs:
      - release-upload-package
      - release-upload-pages
      - release-upload-workspaces-json
    outputs:
      tag-url: ${{ steps.prepare.outputs.tag-url }}
      url: ${{ steps.prepare.outputs.url }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - id: prepare
        name: Prepare
        run: |
          echo tag-url=${{ github.server_url }}/${{ github.repository }}/tree/${{ env.publish-tag }} | tee --append $GITHUB_OUTPUT
          echo url=${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ env.publish-tag }} | tee --append $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all tags.
      - continue-on-error: true
        name: Delete existing tag
        run: git tag -d ${{ env.publish-tag }}
      - name: Create new tag
        run: git tag ${{ env.publish-tag }}
      - continue-on-error: true
        name: Delete server tag
        run: git push origin :${{ env.publish-tag }}
      - name: Push tag
        run: git push origin ${{ env.publish-tag }}
      - env:
          GH_TOKEN: ${{ github.token }}
        name: Publish release
        run: gh release edit --draft=false --prerelease ${{ env.publish-tag }} --repo ${{ github.repository }}

  github-pages-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    outputs:
      url: ${{ steps.deployment.outputs.page_url }}
    name: 'GitHub Pages: Deploy'
    needs:
      - approval
    permissions:
      id-token: write
      pages: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

  github-packages-publish:
    environment:
      name: github-packages
      url: ${{ steps.prepare.outputs.url }}
    name: 'GitHub Packages: Publish'
    needs:
      - approval
      - prepare
    outputs:
      url: ${{ steps.prepare.outputs.url }}
    permissions:
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.prepare.outputs.matrix-public-only) }}
    steps:
      - name: Download workflow control file
        uses: actions/download-artifact@v3
        with:
          name: workspaces
      - name: Download scoped packages
        uses: actions/download-artifact@v3
        with:
          name: scoped-packages
      - id: prepare
        name: Prepare
        run: |
          TARBALL=`cat workspaces.json | jq --arg name ${{ matrix.package-name }} -r '.[$name] | .tarball'`
          VERSION=`tar -xf $TARBALL --to-stdout package/package.json | jq -r '.version'`

          echo package-id=${{ matrix.package-name }}@$VERSION | tee --append $GITHUB_OUTPUT
          echo tarball=$TARBALL | tee --append $GITHUB_OUTPUT
          echo version=$VERSION | tee --append $GITHUB_OUTPUT

          # url=https://github.com/compulim/power-virtual-agents-sdk/pkgs/npm/powerva-chat-adapter
          echo url=${{ github.server_url }}/${{ github.repository }}/pkgs/npm/${{ matrix.package-name }} | tee --append $GITHUB_OUTPUT
      - name: Set up Node.js ${{ inputs.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: https://npm.pkg.github.com/
      - id: has-published
        name: Checks if ${{ steps.prepare.outputs.package-name }}@${{ steps.prepare.outputs.version }} is already published
        uses: ./.github/actions/check-if-package-has-published
        with:
          name: ${{ matrix.package-name }}
          token: ${{ github.token }}
          version: ${{ steps.prepare.outputs.version }}
      - env:
          NODE_AUTH_TOKEN: ${{ github.token }}
        if: ${{ steps.has-published.outputs.published == 'false' }}
        name: Publish ${{ steps.prepare.outputs.package-id }}
        run: |
          ls -l ${{ steps.prepare.outputs.tarball }}
          npm publish --json ${{ steps.prepare.outputs.tarball }}

  summary:
    if: ${{ always() }}
    name: Summary
    needs:
      - github-packages-publish
      - github-pages-deploy
      - release-publish
    runs-on: ubuntu-latest
    steps:
      - name: Post deployment
        run: |
          echo - [GitHub Packages]\(${{ github.server_url }}/${{ github.repository_owner }}?tab=packages\&repo_name=${{ github.event.repository.name }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Pages]\(${{ needs.github-pages-deploy.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Release]\(${{ needs.release-publish.outputs.url }}\) >> $GITHUB_STEP_SUMMARY
          echo - [Source code \(tagged\)]\(${{ needs.release-publish.outputs.tag-url }}\) >> $GITHUB_STEP_SUMMARY
